/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IVaultSchema {
  export type CollateralStruct = {
    TotalNormalisedDebt: BigNumberish;
    TotalCollateralValue: BigNumberish;
    rate: BigNumberish;
    price: BigNumberish;
    debtCeiling: BigNumberish;
    debtFloor: BigNumberish;
    badDebtGracePeriod: BigNumberish;
    collateralDecimal: BigNumberish;
    exists: BigNumberish;
  };

  export type CollateralStructOutput = [
    TotalNormalisedDebt: bigint,
    TotalCollateralValue: bigint,
    rate: bigint,
    price: bigint,
    debtCeiling: bigint,
    debtFloor: bigint,
    badDebtGracePeriod: bigint,
    collateralDecimal: bigint,
    exists: bigint
  ] & {
    TotalNormalisedDebt: bigint;
    TotalCollateralValue: bigint;
    rate: bigint;
    price: bigint;
    debtCeiling: bigint;
    debtFloor: bigint;
    badDebtGracePeriod: bigint;
    collateralDecimal: bigint;
    exists: bigint;
  };

  export type VaultStruct = {
    lockedCollateral: BigNumberish;
    unlockedCollateral: BigNumberish;
    normalisedDebt: BigNumberish;
    collateralName: BytesLike;
    vaultState: BigNumberish;
  };

  export type VaultStructOutput = [
    lockedCollateral: bigint,
    unlockedCollateral: bigint,
    normalisedDebt: bigint,
    collateralName: string,
    vaultState: bigint
  ] & {
    lockedCollateral: bigint;
    unlockedCollateral: bigint;
    normalisedDebt: bigint;
    collateralName: string;
    vaultState: bigint;
  };
}

export interface IVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cleanseVault"
      | "collateralizeVault"
      | "createVault"
      | "getAvailableStableToken"
      | "getCollateralData"
      | "getCollateralDataByVaultId"
      | "getVaultById"
      | "getVaultCountForOwner"
      | "getVaultId"
      | "getVaultOwner"
      | "getVaultsForOwner"
      | "updateCollateralData"
      | "withdrawStableToken"
      | "withdrawUnlockedCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cleanseVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizeVault",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableStableToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralDataByVaultId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCountForOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultsForOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralData",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStableToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnlockedCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cleanseVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableStableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralDataByVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCountForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaultId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnlockedCollateral",
    data: BytesLike
  ): Result;
}

export interface IVault extends BaseContract {
  connect(runner?: ContractRunner | null): IVault;
  waitForDeployment(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cleanseVault: TypedContractMethod<
    [_vaultId: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  collateralizeVault: TypedContractMethod<
    [amount: BigNumberish, owner: AddressLike, _vaultId: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;

  createVault: TypedContractMethod<
    [owner: AddressLike, _collateralName: BytesLike],
    [bigint],
    "nonpayable"
  >;

  getAvailableStableToken: TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "view"
  >;

  getCollateralData: TypedContractMethod<
    [_collateralName: BytesLike],
    [[bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getCollateralDataByVaultId: TypedContractMethod<
    [_vaultId: BigNumberish],
    [IVaultSchema.CollateralStructOutput],
    "view"
  >;

  getVaultById: TypedContractMethod<
    [_vaultId: BigNumberish],
    [IVaultSchema.VaultStructOutput],
    "view"
  >;

  getVaultCountForOwner: TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "view"
  >;

  getVaultId: TypedContractMethod<[], [bigint], "view">;

  getVaultOwner: TypedContractMethod<
    [_vaultId: BigNumberish],
    [string],
    "view"
  >;

  getVaultsForOwner: TypedContractMethod<
    [owner: AddressLike],
    [bigint[]],
    "view"
  >;

  updateCollateralData: TypedContractMethod<
    [_collateralName: BytesLike, param: BytesLike, data: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  withdrawStableToken: TypedContractMethod<
    [_vaultId: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  withdrawUnlockedCollateral: TypedContractMethod<
    [_vaultId: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cleanseVault"
  ): TypedContractMethod<
    [_vaultId: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateralizeVault"
  ): TypedContractMethod<
    [amount: BigNumberish, owner: AddressLike, _vaultId: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVault"
  ): TypedContractMethod<
    [owner: AddressLike, _collateralName: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableStableToken"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollateralData"
  ): TypedContractMethod<
    [_collateralName: BytesLike],
    [[bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollateralDataByVaultId"
  ): TypedContractMethod<
    [_vaultId: BigNumberish],
    [IVaultSchema.CollateralStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultById"
  ): TypedContractMethod<
    [_vaultId: BigNumberish],
    [IVaultSchema.VaultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultCountForOwner"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultOwner"
  ): TypedContractMethod<[_vaultId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVaultsForOwner"
  ): TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "updateCollateralData"
  ): TypedContractMethod<
    [_collateralName: BytesLike, param: BytesLike, data: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawStableToken"
  ): TypedContractMethod<
    [_vaultId: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawUnlockedCollateral"
  ): TypedContractMethod<
    [_vaultId: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
