{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x18196CCaA8C2844c82B40a8bDCa27349C7466280",
    "txHash": "0xcb67cd1349ccaadf6c285b87b4c0bb0d2b0858dae5862d25ac1e645300b4c20a"
  },
  "proxies": [
    {
      "address": "0x94D80B2EA3cda86bF350DD7860e1171701F284c8",
      "txHash": "0x59132be1d8c7f4875cf06340176d8da870b6d1daa039222165073bf6dc772971",
      "kind": "transparent"
    },
    {
      "address": "0x774843f6Baa4AAE62F026a8aF3c1C6FF3e55Ca39",
      "txHash": "0xd7fb361d1fa68763fa0bb60e7c1e6c8aecbfe591362819d672a9f4f48a9cc455",
      "kind": "transparent"
    },
    {
      "address": "0xeAb261C2021Af0e3AC9D716C6b7BaDAd73caCfff",
      "txHash": "0x81cacb3696b4b33885a55276874e1ce6c99a389ed28296a0a02d8e1f7fc26ae8",
      "kind": "transparent"
    },
    {
      "address": "0x44b6Cb68F7636E7859CfC83af73bfCFB11184c95",
      "txHash": "0xc176bd208347ec2e564c8ecc736515205d92dd1fbd42242e49c49cb13d390fc8",
      "kind": "transparent"
    },
    {
      "address": "0xF11b2e2433cB326cce84101c4D0aF8Dda8603683",
      "txHash": "0xe07e8d280e24694f367fc2c326961599e86f5b67252010e28eb1af5390456dd9",
      "kind": "transparent"
    },
    {
      "address": "0x53D0ec27F7221535e72C11BA85BA1a1De34298c5",
      "txHash": "0xc7913adc5558a7b6e113d5467f8b0dc374a1025d041f064a2377ef3be39c408d",
      "kind": "transparent"
    },
    {
      "address": "0x7F46a4944F9C3ecF4Ea622364132b3fE9aBa1015",
      "txHash": "0x26943405a18bb642bc487b71fe13cfc904a9a7392df69892023d34cc7dfb8ad6",
      "kind": "transparent"
    },
    {
      "address": "0xEd78389a73Bd77c0A54f5DAcBA2beADbed27A9EC",
      "txHash": "0x17ee6de957a0e88d921714d790bc827f1d09af1a4694881dc048a160697f7760",
      "kind": "transparent"
    },
    {
      "address": "0xb114Ee3140B767692f76C5847C2698E0535A8Ca2",
      "txHash": "0xee68050e0a133e8e3e8091084b0d1eca974f447d5a257ac13a49065c0a151246",
      "kind": "transparent"
    },
    {
      "address": "0x067C562aEbcACF92D8334E8094Da54EbE289591E",
      "txHash": "0x72febc49919c672980c1caa1dc6a4b5fda8b9a0cfa767d56f5a2043ec7554b6e",
      "kind": "transparent"
    },
    {
      "address": "0xd133483378e861Ab22B561902De2065D9460611c",
      "txHash": "0x5529d6c0f079e6e2fc058e59c036bde81c7508b511a8eaf5644d29ce96538af3",
      "kind": "transparent"
    },
    {
      "address": "0xDFe8b1B49DF6E3357AB61301aa4D6dEe716D85Ad",
      "txHash": "0xd8219e41a8369fdc8828aff2b415ee20925200eaaad5e2530a0ed5d7a922e39c",
      "kind": "transparent"
    }
  ],
  "impls": {
    "22aff450d1fa20637c91bb1f50f3049de9c1c0d7b80c0391f3522a77689ed507": {
      "address": "0x5d0583Ef20884C0b175046d515Ec227200C12C89",
      "txHash": "0x760543171e4d1f1e133e1a372b52119140cf9a906b4db5958997103627d30b8c",
      "layout": {
        "solcVersion": "0.8.21",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "debt",
            "offset": 0,
            "slot": "151",
            "type": "t_uint256",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:13"
          },
          {
            "label": "live",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:14"
          },
          {
            "label": "vaultId",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:15"
          },
          {
            "label": "vault",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_struct(Vault)8365_storage)dyn_storage",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:17"
          },
          {
            "label": "collateralMapping",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_bytes32,t_struct(Collateral)8353_storage)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:18"
          },
          {
            "label": "vaultMapping",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_uint256,t_struct(Vault)8365_storage)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:19"
          },
          {
            "label": "ownerMapping",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:20"
          },
          {
            "label": "firstVault",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:21"
          },
          {
            "label": "lastVault",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:22"
          },
          {
            "label": "list",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_uint256,t_struct(List)8370_storage)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:23"
          },
          {
            "label": "vaultCountMapping",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:24"
          },
          {
            "label": "availableNGNx",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:25"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Vault)8365_storage)dyn_storage": {
            "label": "struct IVaultSchema.Vault[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(VaultStateEnum)8374": {
            "label": "enum IVaultSchema.VaultStateEnum",
            "members": [
              "Idle",
              "Active",
              "Inactive"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(Collateral)8353_storage)": {
            "label": "mapping(bytes32 => struct IVaultSchema.Collateral)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(List)8370_storage)": {
            "label": "mapping(uint256 => struct IVaultSchema.List)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Vault)8365_storage)": {
            "label": "mapping(uint256 => struct IVaultSchema.Vault)",
            "numberOfBytes": "32"
          },
          "t_struct(Collateral)8353_storage": {
            "label": "struct IVaultSchema.Collateral",
            "members": [
              {
                "label": "TotalNormalisedDebt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "TotalCollateralValue",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "rate",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "debtCeiling",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "debtFloor",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "badDebtGracePeriod",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(List)8370_storage": {
            "label": "struct IVaultSchema.List",
            "members": [
              {
                "label": "prev",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "next",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Vault)8365_storage": {
            "label": "struct IVaultSchema.Vault",
            "members": [
              {
                "label": "lockedCollateral",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockedCollateral",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "normalisedDebt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "collateralName",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "vaultState",
                "type": "t_enum(VaultStateEnum)8374",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ebfea5be5b6480628cd76a12bc45b24e99f06e89e614b9ad87c83d63a52fcb4e": {
      "address": "0x70cd9e416a943cF20887194bC4b1359F226f6530",
      "txHash": "0xedc77451666e398d44fa04d7f723079c00e4c52371055a0e2f86f9ebaed54e33",
      "layout": {
        "solcVersion": "0.8.21",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "debt",
            "offset": 0,
            "slot": "151",
            "type": "t_uint256",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:13"
          },
          {
            "label": "live",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:14"
          },
          {
            "label": "vaultId",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:15"
          },
          {
            "label": "vault",
            "offset": 0,
            "slot": "154",
            "type": "t_array(t_struct(Vault)3173_storage)dyn_storage",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:17"
          },
          {
            "label": "collateralMapping",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_bytes32,t_struct(Collateral)3161_storage)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:18"
          },
          {
            "label": "vaultMapping",
            "offset": 0,
            "slot": "156",
            "type": "t_mapping(t_uint256,t_struct(Vault)3173_storage)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:19"
          },
          {
            "label": "ownerMapping",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:20"
          },
          {
            "label": "firstVault",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:21"
          },
          {
            "label": "lastVault",
            "offset": 0,
            "slot": "159",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:22"
          },
          {
            "label": "list",
            "offset": 0,
            "slot": "160",
            "type": "t_mapping(t_uint256,t_struct(List)3178_storage)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:23"
          },
          {
            "label": "vaultCountMapping",
            "offset": 0,
            "slot": "161",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:24"
          },
          {
            "label": "availableNGNx",
            "offset": 0,
            "slot": "162",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CoreVault",
            "src": "contracts/vault.sol:25"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Vault)3173_storage)dyn_storage": {
            "label": "struct IVaultSchema.Vault[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(VaultStateEnum)3182": {
            "label": "enum IVaultSchema.VaultStateEnum",
            "members": [
              "Idle",
              "Active",
              "Inactive"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(Collateral)3161_storage)": {
            "label": "mapping(bytes32 => struct IVaultSchema.Collateral)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(List)3178_storage)": {
            "label": "mapping(uint256 => struct IVaultSchema.List)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Vault)3173_storage)": {
            "label": "mapping(uint256 => struct IVaultSchema.Vault)",
            "numberOfBytes": "32"
          },
          "t_struct(Collateral)3161_storage": {
            "label": "struct IVaultSchema.Collateral",
            "members": [
              {
                "label": "TotalNormalisedDebt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "TotalCollateralValue",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "rate",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "debtCeiling",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "debtFloor",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "badDebtGracePeriod",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(List)3178_storage": {
            "label": "struct IVaultSchema.List",
            "members": [
              {
                "label": "prev",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "next",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Vault)3173_storage": {
            "label": "struct IVaultSchema.Vault",
            "members": [
              {
                "label": "lockedCollateral",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockedCollateral",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "normalisedDebt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "collateralName",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "vaultState",
                "type": "t_enum(VaultStateEnum)3182",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "fba1191ab71711cbce2b1ce263ace2a8b5aac7e7ddcc51585f10d5762d297b0f": {
      "address": "0x683775242E9de755585ee7c405Ac6c54D07663e5",
      "txHash": "0xe6880ed27262b1cf9d5e3b93f07eb3c89bbedecf2c8edd57bc6ca0c07d6ede0d",
      "layout": {
        "solcVersion": "0.8.21",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "154",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "155",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "156",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "201",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "202",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "203",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "204",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "205",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "253",
            "type": "t_mapping(t_address,t_struct(Counter)1922_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "254",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "_trustedForwarder",
            "offset": 0,
            "slot": "304",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ERC2771ContextUpgradeable",
            "src": "contracts/helpers/ERC2771ContextUpgradeable.sol:16"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC2771ContextUpgradeable",
            "src": "contracts/helpers/ERC2771ContextUpgradeable.sol:70"
          },
          {
            "label": "live",
            "offset": 0,
            "slot": "354",
            "type": "t_uint256",
            "contract": "NGNX",
            "src": "contracts/ngnx.sol:25"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)1922_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)1922_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
